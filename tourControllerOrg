const fs = require('fs');
const Tour = require('./../models/tourModel');
// const tours = JSON.parse(
//   fs.readFileSync(`${__dirname}/../dev-data/data/tours-simple.json`, 'utf-8')
// );
/*
exports.checkID = (req, res, next, val) => {
  if (val > tours.length - 1) {
    return res.status(404).json({ status: 'fail', message: 'Invalid ID' });
  }
  next();
};
*/
/*
exports.checkBody = (req, res, next) => {
  console.log('Reached checkbody middleware');
  if (!req.body.name || !req.body.price) {
    return res.status(400).json({
      status: 'failed',
      message: 'name or price property is missing',
    });
  }
  next();
};
*/
exports.aliasTopTours = (req, res, next) => {
  req.query.limit = '5';
  req.query.sort = '-ratingAverage,price';
  req.query.fields = 'name,price,ratingsAverage,summary,difficulty';
  next();
};

class APIFeatures {
  constructor(query, queryString) {
    this.query = query;
    this.queryString = queryString;
  }
  filter() {
    const queryObj = { ...this.queryString };
    const excludeFields = ['page', 'limit', 'sort', 'fields'];
    excludeFields.forEach((ele) => {
      delete queryObj[ele];
    });

    // 2) Advanced Filtering

    let queryStr = JSON.stringify(queryObj);
    queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);

    //let query = Tour.find(JSON.parse(queryStr));
    this.query = this.query.find(JSON.parse(queryStr));
    return this;
  }
  sort() {
    if (this.queryString.sort) {
      const sortBy = this.queryString.sort.split(',').join(' ');
      console.log(sortBy);
      this.query = this.query.sort(sortBy);
    } else {
      this.query = this.query.sort('-createdAt');
    }
    return this;
  }
  limitingFields() {
    if (this.queryString.fields) {
      const fields = this.queryString.fields.replaceAll(',', ' ');
      console.log(fields);
      this.query = this.query.select(fields);
    } else {
      this.query = this.query.select('-__v'); // minus sign to exclude fields
    }
    return this;
  }
  paginate() {
    const page = this.reqString.page * 1 || 1; // setting default page
    const limit = this.reqString.limit * 1 || 100;
    const skip = (page - 1) * limit;
    // page = 3 & limit = 10 , 1-10 , page 1 , 11-20 , page-2, 21-30 , page-3
    this.query = this.query.skip(skip).limit(limit);
    return this;
  }
}

exports.getAllTours = async (req, res) => {
  try {
    //BUILD QUERY

    // 1) Filtering
    // const queryObj = { ...req.query };
    // console.log(req.query, queryObj);
    // const excludeFields = ['page', 'limit', 'sort', 'fields'];
    // excludeFields.forEach((ele) => {
    //   delete queryObj[ele];
    // });

    // // 2) Advanced Filtering

    // let queryStr = JSON.stringify(queryObj);
    // queryStr = queryStr.replace(/\b(gte|gt|lte|lt)\b/g, (match) => `$${match}`);

    // let query = Tour.find(JSON.parse(queryStr));
    // 3) Sorting

    // if (req.query.sort) {
    //   const sortBy = req.query.sort.split(',').join(' ');
    //   console.log(sortBy);
    //   query = query.sort(sortBy);
    // } else {
    //   query = query.sort('-createdAt');
    // }
    // 4) Implementing fields (in case of data heavy APIs)
    // if (req.query.fields) {
    //   const fields = req.query.fields.replaceAll(',', ' ');
    //   console.log(fields);
    //   query = query.select(fields);
    // } else {
    //   query = query.select('-__v'); // minus sign to exclude fields
    // }

    // 5) Pagination
    // const page = req.query.page * 1 || 1; // setting default page
    // const limit = req.query.limit * 1 || 100;
    // const skip = (page - 1) * limit;
    // // page = 3 & limit = 10 , 1-10 , page 1 , 11-20 , page-2, 21-30 , page-3
    // query = query.skip(skip).limit(limit);
    // if (req.query.page) {
    //   const numTours = await Tour.countDocuments(); // returns amount of tours
    //   if (skip > numTours) throw new Error('This page does not exist');
    //   console.log(numTours);
    // }

    // EXECUTE QUERY
    const features = new APIFeatures(Tours.find(), req.query)
      .filter()
      .sort()
      .limitingFields()
      .paginate();

    const tours = await features.query;
    res.status(200).json({
      status: 'success',
      result: tours.length,
      data: {
        tours,
      },
    });
  } catch (err) {
    res.status(404).json({
      status: 'fail',
      message: err,
    });
  }
};
// exports.getTour = async (req, res) => {
//   //const tour = tours.find((el) => el.id === id);

//   res.status(200).json({
//     status: 'success',
//     // result: tours.length,
//     // data: {
//     //   tour,
//     // },
//   });
// };
exports.getTour = async (req, res) => {
  try {
    const tour = await Tour.findById(req.params.id);
    res.status(200).json({
      status: 'success',
      data: {
        tour,
      },
    });
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: err,
    });
  }
};
/*
exports.createTour = (req, res) => {
  //console.log(req.body);
  //const newId = tours[tours.length - 1].id + 1;
  //const newTour = Object.assign({ id: newId }, req.body);
  //tours.push(newTour);
  // fs.writeFile(
  //   `${__dirname}/dev-data/data/tours-simple.json`,
  //   JSON.stringify(tours),
  //   (err) => {
  //     res.status(200).json({ status: 'success', data: newTour });
  //   }
  // );

};
*/
exports.createTour = async (req, res) => {
  try {
    ////////////////////////////////////
    //     1st method to create tour
    // const newTour = new Tour({});
    // newTour.save()

    ////////////////////////////////////
    //     2nd method to create tour
    const newTour = await Tour.create(req.body);
    res.status(201).json({
      status: 'success',
      data: {
        tour: newTour,
      },
    });
  } catch (err) {
    res.status(400).json({
      status: 'fail',
      message: err,
    });
  }
};
exports.updateTour = async (req, res) => {
  const tour = await Tour.findByIdAndUpdate(req.params.id, req.body, {
    new: true,
    runValidators: true,
  });
  res.status(200).json({
    status: 'success',
    data: {
      tour,
    },
  });
};

exports.deleteTour = async (req, res) => {
  await Tour.findByIdAndDelete(req.params.id);
  res.status(204).json({
    status: 'success',
    data: null,
  });
};
